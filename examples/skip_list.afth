get : a a b Map -> b .
swap : a b -> b a .
-- , indicates typeclass constraint; > is polymorphic in a where a
-- belongs to the Ord type class
>    : a Ord , a a -> Bool .
dup  : a   -> a a .
?    : a Ref -> a .

bids : bid_id bid Map .
next : bid -> bid Ref Maybe .
-- Example comment.

fromMaybe : a a Maybe -> a .
    case
      Nothing -> .
      Just    -> nip .
    endcase .

find_before : wei bid -> bid_id .
    2dup >a rrot
    begin
      value > if b exit endif a next 0<>
    while
      a next dup >b c slist [] get
      >a dup a
    endwhile
    b .

insert : bid_id wei -> ... .
    skip_level >b
    5 0 down_to
      i >c
      dup i slist [] get
      find_before
      i b <= if insert_after exit endif
      swap
    loop .

insert_after : bid_id wei bid_id -> bid_id wei .
    3dup dup rrot
    0 alloc bid
    >a swap 2dup
    a to prev rrot
    c slist [] get
    >b b next swap
    b to next dup
    a to next
    c slist [] get
    to prev
    drop .
    

delete : bid_id -> .
    >b
    5 0 down_to
      b i slist [] -- b slist[i]
      get dup >a   -- slist[i][b], a = slist[i][b], b = bid_id
      value        -- slist[i][b].value
      0<> if       -- -
        a next i slist [] a prev get to next
        a prev i slist [] a next get to prev
      endif
    loop .
